name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  pre_build_checks:
    name: Pre build checks
    runs-on: macos-14
    outputs:
      pre_build_ok: ${{ steps.result.outputs.pre_build_ok }}
    steps:
      - uses: actions/checkout@v5
      - name: Install maturin
        uses: threeal/pipx-install-action@v1.0.0
        with:
          packages: maturin
      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build and test
        id: result
        shell: bash
        run: |
          uv venv
          source .venv/bin/activate
          maturin develop --uv --features diffsol-cranelift --extras dev
          set +e # Error trapping disabled so job finishes for post-job caching
          pytest -s -v
          if [ "$?" = "0" ]; then
            echo "pre_build_ok=true" >> "$GITHUB_OUTPUT"
          else
            echo "pre_build_ok=false" >> "$GITHUB_OUTPUT"
          fi
          # Report success regardless of failure so caching completes
          set -e

  # As pre_build_checks does not flag failure, report in this separate job
  report_failure:
    name: Report build failure
    runs-on: ubuntu-latest
    needs: pre_build_checks
    if: needs.pre_build_checks.outputs.pre_build_ok == 'false'
    steps:
      - name: Report failure
        shell: bash
        run: |
          echo "Build prerequisites failed, see 'Pre build checks' results"
          exit 1

  wheels:
    runs-on: ${{ matrix.platform.runner }}
    needs: pre_build_checks
    if: needs.pre_build_checks.outputs.pre_build_ok == 'true'
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: windows-latest
            target: AMD64
          - runner: macos-14
            target: arm64

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Install LLVM and Clang
        if: runner.os == 'macOS'
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "17.0"
      - name: Install SuiteSparse
        if: runner.os == 'macOS'
        run: brew install suite-sparse
      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.0
        env:
          CIBW_ARCHS_LINUX: ${{ matrix.platform.target }}
          CIBW_ARCHS_MACOS: ${{ matrix.platform.target }}
          CIBW_ARCHS_WINDOWS: ${{ matrix.platform.target }}
          SCCACHE_VERSION: 0.2.13
          CIBW_BEFORE_ALL_LINUX: "curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y && yum install -y openssl-devel && source .github/workflows/maturin_linux_setup.sh"
          CIBW_BUILD_VERBOSITY: "1"
          CIBW_ENVIRONMENT_LINUX: 'PATH="$PATH:$HOME/.cargo/bin" MATURIN_PEP517_ARGS="--features diffsol-llvm17 --features suitesparse" RUSTFLAGS="-C linker-features=-lld"'
          CIBW_ENVIRONMENT_MACOS: 'PATH="$PATH:$HOME/.cargo/bin" MACOSX_DEPLOYMENT_TARGET=14.0 MATURIN_PEP517_ARGS="--features diffsol-llvm17"'
          CIBW_ENVIRONMENT_WINDOWS: 'PATH="$PATH:$HOME/.cargo/bin" MATURIN_PEP517_ARGS="--features diffsol-cranelift"'
          CIBW_SKIP: "*-win32 *-musllinux_*"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform.runner }}-${{ matrix.platform.target }}
          path: ./wheelhouse/*.whl
      - name: pytest
        shell: bash
        env:
          ACTIVATE: ${{ runner.os == 'Windows' && '.venv/Scripts/activate' || '.venv/bin/activate' }}
          PYTEST_ARGS: ${{ runner.os == 'macOS' && '--ignore examples' || '' }}
        run: |
          set -e
          python3 -m venv .venv
          source $ACTIVATE
          pip install 'pydiffsol[dev]' --find-links ./wheelhouse --force-reinstall
          pytest -s $PYTEST_ARGS

  sdist:
    runs-on: ubuntu-latest
    needs: pre_build_checks
    if: needs.pre_build_checks.outputs.pre_build_ok == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          args: --release --out dist --sdist --features diffsol-cranelift
      - name: Remove wheels, just keep sdist
        run: rm -rf dist/*.whl
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [wheels, sdist]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'wheels-*/*'
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
